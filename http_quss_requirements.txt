
# Disable hash randomization from within python program

https://stackoverflow.com/questions/30585108/disable-hash-randomization-from-within-python-program

#! /bin/bash
export PYTHONHASHSEED=0

# The beginning of the program

import os
import sys
hashseed = os.getenv('PYTHONHASHSEED')
if not hashseed:
    os.environ['PYTHONHASHSEED'] = '0'
    os.execv(sys.executable, [sys.executable] + sys.argv)

#Apart from dictionary order, hash randomisation may also break 
# existing code that uses hash() directly. 
# A workaround that solved the problem for me in this case was 
# to replace

hash(mystring)

# with

int(hashlib.sha512(mystring.encode('utf-8')).hexdigest(), 16)

hashlib.sha512()
hash.hexdigest()

# To reproduce the same 64-bit range as hash(), one could reduce 
# the number of hexadecimal digits to 16 (4 bits per digit) 
# and shift the result to start at the smallest negative 64-bit number:

int(hashlib.sha256(mystring.encode('utf-8')).hexdigest()[:16], 16)-(1<<63)

# Alternatively, one can take 8 bytes and use int.from_bytes:

int.from_bytes(hashlib.sha256(mystring).digest()[:8], byteorder='big', signed=True)


# Concurrency

pip3 install -r requirements.txt

aiohttp==3.4.4
asks==2.0.0
astroid==2.0.4
async-generator==1.10
async-timeout==3.0.1
atomicwrites==1.2.0
attrs==18.1.0
certifi==2018.8.13
chardet==3.0.4
contextvars==2.3
h11==0.8.1
idna==2.7
immutables==0.6
isort==4.3.4
lazy-object-proxy==1.3.1
mccabe==0.6.1
more-itertools==4.3.0
multidict==4.4.2
multio==0.2.3
outcome==0.1.0
pathlib2==2.3.2
pluggy==0.7.1
py==1.6.0
pycodestyle==2.3.1
pytest==3.7.3
requests==2.19.1
six==1.11.0
sniffio==1.0.0
sortedcontainers==2.0.4
tqdm==4.25.0
trio==0.6.0
typed-ast==1.1.0
urllib3==1.23
wrapt==1.10.11
yarl==1.2.6